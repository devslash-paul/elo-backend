package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/paulthom12345/elo-backend/models"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CloseDB provides a mock function with given fields:
func (_m *DB) CloseDB() {
	_m.Called()
}

// Create provides a mock function with given fields: _a0
func (_m *DB) Create(_a0 interface{}) {
	_m.Called(_a0)
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *DB) Delete(_a0 interface{}, _a1 ...interface{}) {
	_m.Called(_a0, _a1)
}

// First provides a mock function with given fields: _a0, _a1
func (_m *DB) First(_a0 interface{}, _a1 ...interface{}) {
	_m.Called(_a0, _a1)
}

// GetRelatedFor provides a mock function with given fields: _a0, _a1
func (_m *DB) GetRelatedFor(_a0 interface{}, _a1 ...interface{}) {
	_m.Called(_a0, _a1)
}

// Migrate provides a mock function with given fields: _a0
func (_m *DB) Migrate(_a0 bool) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreloadAllFor provides a mock function with given fields: _a0, _a1
func (_m *DB) PreloadAllFor(_a0 interface{}, _a1 string) {
	_m.Called(_a0, _a1)
}

// PrimaryWithCondidtion provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DB) PrimaryWithCondidtion(_a0 interface{}, _a1 uint64, _a2 string, _a3 ...interface{}) {
	_m.Called(_a0, _a1, _a2, _a3)
}

// Where provides a mock function with given fields: _a0, _a1, _a2
func (_m *DB) Where(_a0 interface{}, _a1 string, _a2 ...interface{}) {
	_m.Called(_a0, _a1, _a2)
}

var _ models.DB = (*DB)(nil)
